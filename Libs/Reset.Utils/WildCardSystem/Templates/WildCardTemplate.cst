<%@ CodeTemplate Language="VB" TargetLanguage="Text" Debug="True"     CompilerVersion="v4.0"  %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Property Name="MyNameSpace" Type="System.String"  %>
<%@ Property Name="MyClassName" Type="System.String"  %>
<%@ Property Name="MyAccess" Type="System.String" %>
<%@ XmlProperty Name="WildCardSystemRule" Schema="..\codegen.wildcardsystem.xsd"  %>
    
'--------------------------------------------------------------------------------
'-- This file generated by CodeSmith
'--------------------------------------------------------------------------------

<%	
	'Build a list of KEY properties for parameters
	Dim keyParameters as string = CreateParams(WildCardSystemRule.Criteria.Properties)

	Dim allProperties = WildCardSystemRule.Criteria.Properties.Union(WildCardSystemRule.Results.Properties).ToList()

	'Build a list of ALL properties for parameters
	Dim allParameters as string = CreateParams(allProperties)
%>

Imports System.ComponentModel
Imports Reset.Utils
Imports Reset.Utils.XmlUtilities
Imports Reset.Utils.WildCardSystem

Namespace <%= MyNameSpace %>
    
    <%= MyAccess %> Partial Class <%= MyClassName %>
        Inherits AbstractWildCardSystem(Of Rule, Result)
   
#Region "Rule"

        Public Partial Class Rule
            Implements IWildCardSystemRule
            Implements INotifyPropertyChanged
            
            Public Event PropertyChanged(ByVal sender As Object, ByVal e As PropertyChangedEventArgs) Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
            Friend ReadOnly Record As IWildCardSystemRecord
            
            Friend Sub New()
				Me.New(New WildCardSystemRecord)
            End Sub

            Friend Sub New(record as IWildCardSystemRecord)
                Me.Record = record
                Dim xml = Record.Data
                if xml isnot nothing then
                    LoadFromXml(xml)
                else
                    SaveToRecord()
                End if
            End Sub    

			Public Sub New(<%= allParameters.ToString() %>)
				Me.Record = New WildCardSystemRecord

				<% for each prop as PropertiesProperty in allProperties %>
				Me._<%= LowerCaseFirstLetter(prop.name) %> = <%= LowerCaseFirstLetter(prop.name) %>
				<% next %>

				SaveToRecord()
			End Sub
            
            <% for each prop as PropertiesProperty in allProperties %>

            private _<%= LowerCaseFirstLetter(prop.name)%> as <%= prop.type %><% if prop.default <> "" then %> = <%= prop.[default] %> <% end if%>
            Public Property <%= prop.name %> as <%= prop.type %> 
                Get
                    Return _<%= LowerCaseFirstLetter(prop.name)%>
                End Get
                Set(ByVal value As <%= prop.type %>)
					dim oldKey = Record.Key
                    _<%= LowerCaseFirstLetter(prop.name)%> = value
					SaveToRecord()

					if oldKey <> Record.Key then
						RaiseEvent PropertyChanged(Me, New WildCardSystemKeyChangedArgs("<%= prop.name %>", oldKey, Record.Key))
					else
						RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("<%= prop.name %>"))
					end if
                End Set
            End Property   
			         
            <% next %>            

            Public ReadOnly Property WildcardKey As String Implements IWildCardSystemRule.WildCardKey
                Get
					Return Record.Key
                End Get
            End Property
			
			Private Sub DoReadAttribute(ByVal name As String, ByVal value As String)
	            Select Case name
	            <% for each prop as PropertiesProperty in allProperties  %>
	                Case "<%= prop.name %>"
	                        Me.<%= prop.name %> = Reset.Utils.Strings.StringParsers.Parse(Of <%= prop.type %>)(value)
	            <% next %>
	                Case Else
	                    Throw New Exception(String.Format("Unexpected attribute {0}", name))
	            End Select
	        End Sub
            
            Friend Sub SaveToRecord() 
				Record.Key = GetKey()
                Record.Data = SaveToXml()
            End Sub

			Private Function GetKey As String
				Dim sb As New System.Text.StringBuilder
				<% for i as integer = 0 to WildCardSystemRule.Criteria.Properties.count - 1 
					dim prop as PropertiesProperty = WildCardSystemRule.Criteria.Properties(i) %>

				<% if prop.IsEnum then %> sb.Append(If(<%= prop.name %> = 0, "*", <%= prop.name %>.ToString())) 
				<% else %> sb.Append(If(<%= prop.name %> Is Nothing, "*", <%= prop.name %>.ToString())) 
				<% end if %>

				<% if i <> WildCardSystemRule.Criteria.Properties.count - 1 then %>sb.Append(".")<% end if%>
				<% next %>
				Return sb.ToString()
            End Function
						
            Private Sub LoadFromXml(xml As String)
				Using reader = New System.Xml.XmlTextReader(New IO.StringReader(xml))
					reader.MoveToContent()
					While reader.MoveToNextAttribute()
			            DoReadAttribute(reader.Name, reader.Value)
			        End While
				End Using
            End Sub

			Private Function SaveToXml() As String
                dim xml = <<%= WildCardSystemRule.Name %>/>.
                <% for i as integer = 0 to allProperties.count - 1 
                    dim prop as PropertiesProperty = allProperties(i)%>
                    AddAttributeIfNotNullOrUndefined("<%= prop.name %>", <%= prop.name %>)<% if i <> allProperties.count - 1 then %>.<% end if%>
                <% next %>
                return xml.GetOuterXml()
            End Function
            
        End Class
        
#End Region

#Region "Result"

        Partial Class Result
			Inherits AbstractWildCardSystemResult(of Rule)
           
            Friend Sub New(ByVal rule As Rule)
				MyBase.New(rule)

                <% for each prop as PropertiesProperty in WildCardSystemRule.Results.Properties %>
                _<%= LowerCaseFirstLetter(prop.name)%> = rule.<%= (prop.name)%>
                <% next %>
            End Sub
			
            <% for each prop as PropertiesProperty in WildCardSystemRule.Results.Properties %>
            private _<%= LowerCaseFirstLetter(prop.name)%> as <%= (prop.type)%>
            Public ReadOnly Property <%= (prop.name)%> As <%= (prop.type)%>
                Get
                    Return _<%= LowerCaseFirstLetter(prop.name)%>
                End Get
            End Property
            <% next %>
            
        End Class

#End Region

#Region "RuleBinder"

        Public Class RuleBinder
            Inherits AbstractWildCardSystem(Of Rule, Result).AbstractRuleBinder

			Public Sub New()
                MyBase.New(New <%= WildCardSystemRule.Name %>())
            End Sub
						
			Public Sub New(wcs As <%= WildCardSystemRule.Name %>)
                MyBase.New(wcs)
            End Sub

        End Class

#End Region

        Public Sub New()
            MyBase.New()
			CustomizeCreation()
        End Sub    
		        
        Public Sub New(ByVal records As IEnumerable(Of IWildCardSystemRecord))
            MyBase.New(records)
			CustomizeCreation()
        End Sub       
        
        Public Overrides ReadOnly Property Name As string
            Get
                Return "<%= WildCardSystemRule.Name %>"
            End Get
        End Property

        Protected Overloads Overrides Function CreateFromRecord(ByVal record As IWildCardSystemRecord) As Rule
            Return New Rule(record)
        End Function

        Protected Overrides Function RetrieveRecord(ByVal rule As Rule) As IWildCardSystemRecord
            Return rule.Record
        End Function
        
        Protected Overrides Function CreateResult(ByVal rule As Rule) As Result
            Return New Result(rule)
        End Function
		
		Protected Overrides Readonly Property CriteriaColumnCount as Integer
			Get
				return <%= WildCardSystemRule.Criteria.Properties.Count %>
			End Get
		End Property

        Partial Private Sub CustomizeCreation()
        End Sub
        
        Public Overrides Function GetColumnDefinitions() As System.Collections.Generic.IEnumerable(Of WildCardSystemColumnDefinition)
            dim ret as new list(of WildCardSystemColumnDefinition)
        <% for each prop as PropertiesProperty in WildCardSystemRule.Criteria.Properties %>
            ret.Add(New WildCardSystemColumnDefinition( "<%= prop.name %>", "<%= prop.caption %>", true, FindType("<%= prop.type %>"), "<%= prop.editor %>"))
        <% next %>
        <% for each prop as PropertiesProperty in WildCardSystemRule.Results.Properties %>
            ret.Add(New WildCardSystemColumnDefinition( "<%= prop.name %>", "<%= prop.caption %>", false, FindType("<%= prop.type %>"), "<%= prop.editor %>"))
        <% next %>
            return ret
        End Function

		Public Function GetResult(<%= keyParameters.ToString() %>) As Result
            Return LookupSetting({ <%= CreateFields(WildCardSystemRule.Criteria.Properties) %>}, False)
        End Function

		Public Function GetExactResult(<%= keyParameters.ToString() %>) As Result
            Return LookupSetting({ <%= CreateFields(WildCardSystemRule.Criteria.Properties) %>}, True)
        End Function

		Public Function GetAllResultsForKeys(<%= keyParameters.ToString() %>) As IEnumerable(Of Result)
            Return LookupAllMatchesByKeyTemplate({ <%= CreateFields(WildCardSystemRule.Criteria.Properties) %>})
        End Function

    End Class
    
    
End Namespace

<script runat="template">

public function LowerCaseFirstLetter(name as string) as string
    if name is nothing or name = "" then return ""
    return name.Substring(0,1).ToLower() + name.Substring(1)
end function

public function IsValueType(prop as PropertiesProperty) as boolean
    select case prop.type
		case "integer"
			return true
		case "boolean"
			return true
		case "double"
			return true
		case "decimal"
			return true
		case "datetime"
			return true
		case else
			return false
    end select
end function

Public Function CreateParams(params as List(of PropertiesProperty)) as string
	Dim sb as New System.Text.StringBuilder
	For Each prop As PropertiesProperty In params
		If sb.Length > 0 then sb.Append(", ")

		sb.Append("Optional ")
		sb.Append(LowerCaseFirstLetter(prop.name))
		sb.Append(" as ")
		sb.Append(prop.type)					

		If prop.IsEnum Then
			sb.Append(" = 0")
		Else
			sb.Append(" = Nothing")
		End If
	Next

	Return sb.ToString()
End Function

Public Function CreateFields(params as IEnumerable(of PropertiesProperty)) as string
	Dim sb as New System.Text.StringBuilder
	For Each prop As PropertiesProperty In params
		If sb.Length > 0 then sb.Append(", ")

		sb.Append(LowerCaseFirstLetter(prop.name))
	Next

	Return sb.ToString()
End Function
</script>

